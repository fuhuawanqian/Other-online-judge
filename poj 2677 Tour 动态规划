Description:
John Doe, a skilled pilot, enjoys traveling. While on vacation, he rents a small plane and starts visiting beautiful places.
To save money, John must determine the shortest closed tour that connects his destinations. 
Each destination is represented by a point in the plane pi = < xi,yi >.
John uses the following strategy: he starts from the leftmost point, then he goes strictly left to right to the rightmost point, and then he goes strictly right back to the starting point. 
It is known that the points have distinct x-coordinates. 
Write a program that, given a set of n points in the plane, computes the shortest closed tour that connects the points according to John's strategy.

Input
The program input is from a text file. Each data set in the file stands for a particular set of points.
For each set of points the data set contains the number of points, and the point coordinates in ascending order of the x coordinate.
White spaces can occur freely in input. The input data are correct.

Output
For each set of data, your program should print the result to the standard output from the beginning of a line. 
The tour length, a floating-point number with two fractional digits, represents the result.
An input/output sample is in the table below. Here there are two data sets. 
The first one contains 3 points specified by their x and y coordinates.
The second point, for example, has the x coordinate 2, and the y coordinate 3.
The result for each data set is the tour length, (6.47 for the first data set in the given example).

Sample Input
3
1 1
2 3
3 1
4
1 1
2 3
3 1
4 2

Sample Output
6.47
7.89

基本思路：
双调欧几里得问题
1)想来想去想到动态规划，然后可以转换成两人同时从起点走到终点.
2)要保证两人走过的点不重复，那么就需要强制定义dp[i][j]中j<i,那么状态dp[i][j]就只能来自dp[i][i-1]的i-1和dp[i-1][j]中的j

代码如下：
#include<cstdio>
#include<cstring>
#include<cmath>
#include<algorithm>

using namespace std;

const int inf = 0x3f3f3f3f;
const int maxn = 50+10;

double dp[maxn][maxn];
struct Node{
    int x,y;
}node[maxn];
double dis(int u,int v){
    return sqrt(double((node[u].x-node[v].x)*(node[u].x-node[v].x)+(node[u].y-node[v].y)*(node[u].y-node[v].y)));
}
int main(){
    int n;
    while(~scanf("%d",&n)){
        for(int i=1;i<=n;i++){
            scanf("%d%d",&node[i].x,&node[i].y);
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                dp[i][j]=inf;
            }
        }
        dp[1][1]=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<i;j++){
                dp[i][j]=min(dp[i][j],dp[i-1][j]+dis(i-1,i));
                dp[i][i-1]=min(dp[i][i-1],dp[i-1][j]+dis(i,j));
            }
        }
        printf("%.2lf\n",dp[n][n-1]+dis(n,n-1));
    }
    return 0;
}
