乘法逆元:
对于缩系中的元素,每个数a均有唯一的与之对应的乘法逆元x,使得ax≡1(mod n)
一个数有逆元的充分必要条件是gcd(a,n)=1,此时逆元唯一存在
逆元的含义:模n意义下，1个数a如果有逆元x,那么除以a相当于乘以x.

下面给出求逆元的集中方法:

费马小定理:
在模为素数p的情况下，有费马小定理
a^(p-1)=1（mod p)
那么a^(p-2)=a^-1(mod p)
也就是说a的逆元为a^(p-2)

ll qpow(ll x,int n){
    ll ans=1;
    while(n){
        if(n&1) ans=(ans*x)%mod;
        x=(x*x)%mod;
        n>>=1;
    }
    return ans;
}

拓展欧几里得:
保证a与m互素才有逆元
给定模数m，求a的逆相当于求解ax=1(mod m)
这个方程可以转化为ax-my=1
然后套用求二元一次方程的方法，用扩展欧几里得算法求得一组x0,y0和gcd
检查gcd是否为1
gcd不为1则说明逆元不存在
若为1，则调整x为0到0~m-1的范围中即可

void exgcd(ll a,ll b,ll& d,ll& x,ll& y){
    if(!b){
        d=a;x=1;y=0;
    }else{
        exgcd(b,a%b,d,y,x);
        y-=x*(a/b);
    }
}

卢卡斯定理:
卢卡斯定理一般适用于p<10^5的情况,n和m可以很大
long long F[100010];
void init(long long a)
{
    F[0] = 1;
    for(int i = 1;i <= a;i++)
        F[i] = F[i-1]*i%p;
}
long long inv(long long a,long long m)
{
    if(a == 1)return 1;
    return inv(m%a,m)*(m-m/a)%m;
}
long long Lucas(long long n,long long m,long long p)
{
    long long ans = 1;
    while(n&&m)
    {
        long long a = n%p;
        long long b = m%p;
        if(a < b)return 0;
        ans = ans*F[a]%p*inv(F[b]*F[a-b]%p,p)%p;
        n /= p;
        m /= p;
    }
    return ans;
}


逆元打表:
在模质数p下,求1~n逆元 n<p(这里为奇质数)
可以O(n)求出所有逆元,有一个递推式如下:
inv[i]=(p-p/i)*inv[p%i]%p;

int inv[maxn];
void inverse(int n, int p){
    inv[1]=1;
    for(int i=2;i<=n;i++){
        inv[i]=(ll)(p-p/i)*inv[p%i]%p;
    }
}
